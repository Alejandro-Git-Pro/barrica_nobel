{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lucho\\\\Documents\\\\Icaro - Dise\\xF1o Software\\\\barrica_nobel\\\\demofrontLAQM\\\\demofrontlaqm\\\\src\\\\components\\\\ConvTemperatura.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst scaleNames = {\n  c: 'Celsius',\n  f: 'Fahrenheit'\n};\n\nfunction toCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\n\nfunction toFahrenheit(celsius) {\n  return celsius * 9 / 5 + 32;\n}\n\nfunction tryConvert(temperature, convert) {\n  const input = parseFloat(temperature);\n\n  if (Number.isNaN(input)) {\n    return '';\n  }\n\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\n\nfunction BoilingVerdict(props) {\n  if (props.celsius >= 100) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The water would boil.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 14\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"The water would not boil.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 12\n  }, this);\n}\n\n_c = BoilingVerdict;\n\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  render() {\n    const temperature = this.props.temperature;\n    const scale = this.props.scale;\n    return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        children: [\"Enter temperature in \", scaleNames[scale], \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: temperature,\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.state = {\n      temperature: '',\n      scale: 'c'\n    };\n  }\n\n  handleCelsiusChange(temperature) {\n    this.setState({\n      scale: 'c',\n      temperature\n    });\n  }\n\n  handleFahrenheitChange(temperature) {\n    this.setState({\n      scale: 'f',\n      temperature\n    });\n  }\n\n  render() {\n    const scale = this.state.scale;\n    const temperature = this.state.temperature;\n    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(TemperatureInput, {\n        scale: \"c\",\n        temperature: celsius,\n        onTemperatureChange: this.handleCelsiusChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TemperatureInput, {\n        scale: \"f\",\n        temperature: fahrenheit,\n        onTemperatureChange: this.handleFahrenheitChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BoilingVerdict, {\n        celsius: parseFloat(celsius)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default ConvTemperatura;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoilingVerdict\");","map":{"version":3,"names":["React","scaleNames","c","f","toCelsius","fahrenheit","toFahrenheit","celsius","tryConvert","temperature","convert","input","parseFloat","Number","isNaN","output","rounded","Math","round","toString","BoilingVerdict","props","TemperatureInput","Component","constructor","handleChange","bind","e","onTemperatureChange","target","value","render","scale","Calculator","handleCelsiusChange","handleFahrenheitChange","state","setState","ConvTemperatura"],"sources":["C:/Users/Lucho/Documents/Icaro - DiseÃ±o Software/barrica_nobel/demofrontLAQM/demofrontlaqm/src/components/ConvTemperatura.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nconst scaleNames = {\r\n    c: 'Celsius',\r\n    f: 'Fahrenheit'\r\n  };\r\n  \r\n  function toCelsius(fahrenheit) {\r\n    return (fahrenheit - 32) * 5 / 9;\r\n  }\r\n  \r\n  function toFahrenheit(celsius) {\r\n    return (celsius * 9 / 5) + 32;\r\n  }\r\n  \r\n  function tryConvert(temperature, convert) {\r\n    const input = parseFloat(temperature);\r\n    if (Number.isNaN(input)) {\r\n      return '';\r\n    }\r\n    const output = convert(input);\r\n    const rounded = Math.round(output * 1000) / 1000;\r\n    return rounded.toString();\r\n  }\r\n  \r\n  function BoilingVerdict(props) {\r\n    if (props.celsius >= 100) {\r\n      return <p>The water would boil.</p>;\r\n    }\r\n    return <p>The water would not boil.</p>;\r\n  }\r\n  \r\n  class TemperatureInput extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.handleChange = this.handleChange.bind(this);\r\n    }\r\n  \r\n    handleChange(e) {\r\n      this.props.onTemperatureChange(e.target.value);\r\n    }\r\n  \r\n    render() {\r\n      const temperature = this.props.temperature;\r\n      const scale = this.props.scale;\r\n      return (\r\n        <fieldset>\r\n          <legend>Enter temperature in {scaleNames[scale]}:</legend>\r\n          <input value={temperature}\r\n                 onChange={this.handleChange} />\r\n        </fieldset>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Calculator extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\r\n      this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\r\n      this.state = {temperature: '', scale: 'c'};\r\n    }\r\n  \r\n    handleCelsiusChange(temperature) {\r\n      this.setState({scale: 'c', temperature});\r\n    }\r\n  \r\n    handleFahrenheitChange(temperature) {\r\n      this.setState({scale: 'f', temperature});\r\n    }\r\n  \r\n    render() {\r\n      const scale = this.state.scale;\r\n      const temperature = this.state.temperature;\r\n      const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\r\n      const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\r\n  \r\n      return (\r\n        <div>\r\n          <TemperatureInput\r\n            scale=\"c\"\r\n            temperature={celsius}\r\n            onTemperatureChange={this.handleCelsiusChange} />\r\n          <TemperatureInput\r\n            scale=\"f\"\r\n            temperature={fahrenheit}\r\n            onTemperatureChange={this.handleFahrenheitChange} />\r\n          <BoilingVerdict\r\n            celsius={parseFloat(celsius)} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  \r\nexport default ConvTemperatura\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module"}